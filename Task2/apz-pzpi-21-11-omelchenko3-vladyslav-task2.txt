МЕТА РОБОТИ

Метою цієї роботи є створення серверної частини для програмної системи для автоматизації управління спортивними залами та моніторингу умов.
 
ЗАВДАННЯ

Завданням цієї роботи є створення backend-частини програмної системи.
 
ХІД РОБОТИ
1.1	Концептуальне моделювання предметної області

Початком роботи є концептуальне моделювання предметної області заради подальшого моделювання діаграми прецедентів та проєктування для цієї програмної системи бази даних.
Ця модель описує розробку програмного забезпечення для автоматизації управління спортивними залами та контролю їхніх умов. Головна мета програми — створити зручний у використанні інструмент для адміністраторів залів, що дозволить їм ефективно керувати простором, стежити за станом обладнання та умовами в залах, а також швидко реагувати на будь-які проблеми. Це рішення підвищить ефективність управління і своєчасне вирішення будь-яких ситуацій у спортивних комплексах.
У межах цієї предметної області передбачено чотири категорії користувачів. Перша категорія — це неавторизовані користувачі, які мають можливість через веб-інтерфейс лише зареєструвати новий обліковий запис або увійти до системи, використовуючи вже існуючий. Функціональні вимоги, що стосуються цього типу користувачів, абсолютно відповідають їхнім потребам і представлені на діаграмі прецедентів на (рис. 1.1):

До другої категорії належить тренер, який за допомогою веб-клієнту може переглядати зали, у яких він працює, переглядати інформацію про них, включаючи їхні зони та керувати тренуваннями там, а саме: додавати їх, редагувати та видаляти. Також він має можливість переглядати показники датчиків у зонах залу, що є дуже зручним та допомагає тренеру у роботі. Функціональні потреби цієї категорії користувачів відповідають обсягу роботи тренерів та їх наведено у діаграмі прецедентів (рис. 1.2):

До третьої категорії належать власники залів, які, з використанням веб-клієнту можуть керувати залами, а саме: додавати їх, редагувати чи видаляти, розміщати зони у залах, а також наймати тренерів та звільняти їх. Власники повністю керують роботою тренерів. Їхні функціональні потреби відповідають функціям, необхідним для адміністраторів залів та наведені у діаграмі прецедентів (рис. 1.3):

До четвертої категорії належать клієнти залів. Вони можуть переглядати список існуючих залів та інформацію про них та записуватися на тренування. Їхні функціональні потреби повністю відповідають функціям, необхідним для клієнтів та наведені на діаграмі прецедентів (рис. 1.4):

До останньої п’ятої категорії належить адміністратор БД, який має можливість взаємодіяти з базою даних програмної системи. Він забезпечує цілісність та актуальність даних завдяки повному доступу до керування даними. Його функціональні потреби повністю відповідають функціям, необхідним для адміністраторів та наведені на діаграмі прецедентів (рис. 1.5):

У процесі концептуального моделювання предметної області було визначено ключові типи користувачів цієї програмної системи та їхні функціональні можливості, які були докладно описано й візуалізовано у вигляді діаграм прецедентів.

1.2	Опис побудови бази даних

Для даної моделі предметної області було створено схему такої БД, яка буде здатна зберігати всю інформацію, необхідну для реалізації відповідних функцій. У процесі моделювання було визначено 8 основних сутностей: користувачі, профілі користувачів, зали, зони залів, записи тренерів до залу, тренування, запис на тренування та дані датчиків.

Кожна сутність отримала наступні атрибути:

-	Користувачі: id_user, username, email, password. Первинний ключ: id_user.
-	Профілі користувачів: id_profile, id_user, is_owner, is_coach, is_client. Первинний ключ: id_profile. Зовнішній ключ: id_user.
-	Зали: id_gym, name, address, description, id_owner. Первинний ключ: id_gym. Зовнішній ключ: id_owner.
-	Зони залів: id_zone, name, description, id_gym, id_sensor. Первинний ключ: id_zone. Зовнішній ключі: id_gym, id_sensor.
-	Записи тренерів до залу: id_gymcoach, id_coach, id_gym. Первинний ключ: id_gymcoach. Зовнішні ключі: id_coach, id_gym.
-	Тренування: id_training, name, description, id_zone, id_coach, date, time_start, time_end, total_places. Первинний ключ: id_training. Зовнішні ключі: id_zone, id_coach.
-	Запис на тренування: id_reservation, id_client, id_training. Первинний ключ: id_reservation. Зовнішні ключі: id_client, id_training.
-	Дані датчиків: id_sensor, temperature, humidity, noise. Первинний ключ: id_sensor.

Зв’язки між сутностями:

-	«Профілі користувачів – Користувачі» – зв’язок «один до одного», оскільки кожен користувач має лише один профіль.
-	«Зали – Користувачі» – зв’язок «один до багатьох», оскільки у кожного користувача може бути кілька залів.
-	«Зони залів – Зали» – зв’язок «один до багатьох», кожна зона належить лише одному залу.
-	«Записи тренерів до залу – Зали» – зв’язок «один до багатьох», кожен тренер може працювати у кількох залах.
-	«Тренування – Зони залів» – зв’язок «один до багатьох», оскільки кожне тренування може бути прив'язане лише до однієї зони.
-	«Запис на тренування – Тренування» – зв’язок «один до багатьох», кожен клієнт може записатися на декілька тренувань.
-	Дані датчиків - Зони залів» – зв’язок «один до одного», оскільки кожен датчик відповідає лише одній зоні.
ER-діаграма моделі даних зі зв’язками та сутностями зображена на рис. 2.1:

1.3	Серверна частина

Метою створення цієї програмної системи є автоматизація процесів управління спортивними залами та моніторингу їх умов. Вона розроблена на мові Python за допомогою фреймворку Django для розробки REST API, що відповідає за взаємодію між сервером та клієнтськими інтерфейсами. Дані передаються через HTTP протокол, причому кожен метод API має свій унікальний URL і набір параметрів. Формат даних, що обмінюються між клієнтом і сервером, є JSON. REST API було обрано, тому що він є досить нескладним у реалізації та він дуже гарно масштабується, що робить можливим інтеграцію різноманітних клієнтських додатків, таких як веб-інтерфейс, мобільні додатки та IoT-пристрої.
Фронтенд системи, який розроблено з використанням React і збирача Node, комунікує з сервером за допомогою REST API через надсилання та отримання даних у форматі JSON, що дозволяє швидко і зручно створювати різноманітні інтерфейси користувача, здатні до динамічних оновлень залежно від даних на сервері.
IoT-пристрої використовуються для контролю температури, вологості та рівня шуму в спортивних залах. Вони так само взаємодіють із системою завдяки REST API. Ці пристрої передають дані на сервер для їх подальшої обробки. Це дозволяє швидко та зручно стежити за станом зон залів.
Архітектура серверної частини та її взаємодія з іншими елементами системи показана на діаграмах пакетів і компонентів (рис. 3.1):

Для зберігання та обробки даних, пов'язаних з управлінням спортивними залами, організацією тренувань, моніторингом зон залів та збором інформації з сенсорів, було вирішено використовувати систему управління базами даних SQLite. Ця реляційна СУБД інтегрується зі стандартною ORM фреймворку Django, що забезпечує безшовну взаємодію з іншими компонентами системи. Вибір на користь SQLite був зумовлений її легкістю в налаштуванні, простотою інтеграції, а також відсутністю необхідності в складних налаштуваннях серверної частини, що робить її ідеальним рішенням на етапах розробки та тестування.
Серверна частина системи була чітко структурована на кілька основних модулів, що дозволило суттєво оптимізувати процес розробки та забезпечити легкість підтримки коду в майбутньому. Основні модулі включають: ‘models’, ‘views’, ‘urls’, ‘settings’, а також ‘admin’:
-	Модуль ‘models’ відповідає за визначення та управління структурами даних, які зберігаються в базі. Кожна модель у цьому модулі представляє конкретну сутність у базі даних із відповідними атрибутами, що дозволяє розробникам легко маніпулювати цими даними на рівні коду та забезпечувати їхню цілісність і узгодженість із загальною логікою системи.
-	Модуль ‘views’ реалізує всю бізнес-логіку для обробки HTTP-запитів, що надходять від клієнтських додатків. Цей модуль виконує ключову роль у перетворенні даних, які отримуються з бази, у формат, зрозумілий клієнтським інтерфейсам, використовуючи серіалізатори. Крім того, він забезпечує обробку виняткових ситуацій, ведення логування та формування відповідей для клієнтів, що гарантує стабільну роботу серверної частини та безперебійну взаємодію з фронтендом.
-	Модуль ‘urls’ займається маршрутизацією запитів у системі. Він відповідає за визначення URL-шляхів і зв'язування їх із відповідними методами у модулі ‘views’. Це дозволяє чітко організувати маршрутизацію в програмі, забезпечуючи коректну обробку запитів і полегшуючи управління доступом до різних функціональних можливостей системи.
-	Модуль ‘settings’ містить всі необхідні конфігураційні параметри для налаштування проекту на Django. Він включає налаштування для підключення до бази даних, інтеграції сторонніх додатків, визначення середовища виконання та інші важливі конфігураційні параметри, що впливають на роботу серверної частини і всього проекту в цілому.
-	Модуль ‘admin’ забезпечує можливість налаштування та управління адміністративним інтерфейсом програми. Завдяки цьому модулю адміністратори можуть ефективно керувати моделями та даними через зручний веб-інтерфейс, що значно полегшує операційне управління контентом і забезпечує ефективну роботу з даними всередині системи.
Для забезпечення злагодженої взаємодії серверної частини з базою даних була використана стандартна ORM Django. Це дозволяє не тільки легко створювати та виконувати запити до бази даних, але й автоматично виконувати серіалізацію та десеріалізацію даних під час їх зберігання та отримання з бази, що суттєво спрощує роботу з даними та зменшує ризик виникнення помилок.
Додатково в систему було інтегровано механізм логування, який реалізовано на основі стандартних можливостей Django. Це дозволяє адаптувати систему логування під різні середовища, такі як розробка, тестування та продакшн, що забезпечує високий рівень гнучкості при моніторингу та налагодженні роботи програми. За допомогою логування можна налаштувати різні рівні повідомлень, включаючи debug, info, warn та error, що дозволяє ефективно фільтрувати та аналізувати події в системі, забезпечуючи тим самим її стабільну та надійну роботу.
На діаграмі розгортання показано основні принципи функціонування програмної системи, використовувані технології, структуру взаємодії між компонентами та ключові елементи системи (рис. 3.2):

1.4	REST-специфікація

У цьому розділі наведено інформацію про REST API, яке було створено для забезпечення взаємодії з програмною системою управління спортивними залами. API реалізоване на мові Python із використанням Django REST Framework, що надає можливість легкої масштабованості та спрощує процес розробки.
Всі запити до API необхідно відправляти на адресу сервера, за якою працює система. У даному випадку це: http://127.0.0.1:8000.
Ендпоінти API структуровані в кілька модулів, кожен з яких відповідає за певну частину функціональності системи. У зв'язку з цим опис REST специфікації також поділений за модулями.
	Модуль: Аутентифікація та Авторизація
Кінцева точка	Метод HTTP	Призначення
/get_csrf_token/	GET	Отримати CSRF токен
/login/	POST	Вхід користувача
/register/	POST	Реєстрація нового користувача
/exit/	POST	Вихід з системи
/homepage/	GET	Отримати інформацію про профіль та відповідні об'єкти
	Модуль: Управління Залами
Кінцева точка	Метод HTTP	Призначення
/create_gym/	POST	Створення нового залу
/edit_gym/<int:gym>/	PUT, GET	Редагування та отримання даних про зал
/delete_gym/<int:gym>/	DELETE	Видалення залу
/gyms/	GET	Отримання списку всіх залів
/owner_gyms/	GET	Отримання залів власника
	Модуль: Управління Зонами Залів
Кінцева точка	Метод HTTP	Призначення
/create_zone/<int:gym>/	POST	Створення нової зони залу
/edit_zone/<int:zone>/	PUT, GET	Редагування та отримання даних про зону
/delete_zone/<int:zone>/	DELETE	Видалення зони залу
/gym_zones/<int:gym>/	GET	Отримання списку зон у конкретному залі
	Модуль: Управління Тренуваннями
Кінцева точка	Метод HTTP	Призначення
/create_training/<int:zone>/	POST	Створення нового тренування у зоні
/edit_training/<int:training>/	PUT, GET	Редагування та отримання даних про тренування
/delete_training/<int:training>/	DELETE	Видалення тренування
/zone_trainings/<int:zone>/	GET	Отримання списку всіх тренувань у зоні
/gym_trainings/<int:gym>/	GET	Отримання списку всіх тренувань у залі
	Модуль: Управління Тренерами
Кінцева точка	Метод HTTP	Призначення
/create_gym_coach/<int:gym>/	POST	Додавання тренера до залу
/delete_gym_coach/<int:gym_id>/
<int:coach_id>/	DELETE	Видалення тренера із залу
/gym_coaches/<int:gym>/	GET	Отримання списку тренерів у конкретному залі
/coach_gyms/	GET	Отримання всіх залів, у яких працює тренер
	Модуль: Запис на Тренування
Кінцева точка	Метод HTTP	Призначення
/create_reservation/<int:training>/	POST	Створення запису на тренування
/delete_reservation/<int:reservation>/	DELETE	Видалення запису на тренування
/training_reservations/<int:training>/	GET	Отримання списку всіх записів на тренування
/client_reservations/	GET	Отримання списку всіх записів користувача
	Модуль: Дані Датчиків
Кінцева точка	Метод HTTP	Призначення
/add_sensor/<int:zone>/	POST	Додавання нового датчика до зони
/delete_sensor/<int:zone>/	DELETE	Видалення датчика із зони
/get_sensor_data/	POST	Надсилання даних із датчика
/display_sensor_data/<int:zone>/	GET	Відображення даних із датчика для конкретної зони
Кожен із модулів API був розроблений для того, щоб забезпечити ефективну і зручну взаємодію з даними системи через REST API. Всі ендпоінти мають чітко визначені методи HTTP, параметри та структуру запитів, що дозволяє клієнтам системи виконувати необхідні операції з мінімальними зусиллями.
 
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ

1.	Посилання на відео YouTube із демонстрацією роботи додатку:
https://www.youtube.com/watch?v=5d_EKlsHnN8
2.	Посилання на папку у Github репозиторії з вихідним кодом:
https://github.com/NureOmelchenko3Vladyslav/apz-pzpi-21-11-omelchenko3-vladyslav/tree/main/Task2
 
ВИСНОВКИ

Під час виконання лабораторної роботи було розроблено серверну частину для програмної системи для автоматизації управління спортивними залами та моніторингу умов